from st2reactor.sensor.base import Sensor
from st2reactor.sensor.base import PollingSensor
import subprocess
import json
import time

class MalwareDetectionSensor(PollingSensor):
    def __init__(self, sensor_service, config=None):
        super(MalwareDetectionSensor, self).__init__(sensor_service=sensor_service, config=config)
        self._interval = 60  # Check every 60 seconds

    def setup(self):
        self.logger = self.sensor_service.get_logger(__name__)

    def poll(self):
        self.logger.info("Scanning for malware...")
        result = self.scan_for_malware()
        if result:
            self.trigger_malware_detection(result)

    def scan_for_malware(self):
        try:
            # Example command to scan for malware using ClamAV
            output = subprocess.check_output(['clamscan', '--json', '/path/to/scan']).decode('utf-8')
            scan_results = json.loads(output)
            threats = [file for file in scan_results['files'] if scan_results['files'][file]['is_infected']]
            return threats
        except Exception as e:
            self.logger.error(f"Error scanning for malware: {str(e)}")
            return None

    def trigger_malware_detection(self, threats):
        for threat in threats:
            self.logger.warning(f"Malware detected: {threat}")
            # Here you would trigger the corresponding action in StackStorm
            # For example: self.sensor_service.dispatch(trigger='malware_detection.trigger', payload={'threat': threat})

    def cleanup(self):
        self.logger.info("Cleaning up Malware Detection Sensor.")

    def add_trigger(self, trigger):
        self.logger.info(f"Trigger added: {trigger}")